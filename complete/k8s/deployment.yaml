apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-rest-service
  labels:
    app: gs-rest-service
spec:
  selector:
    matchLabels:
      app: gs-rest-service
  template:
    metadata:
      labels:
        app: gs-rest-service
    spec:
      serviceAccountName: ksa-cloud-sql
      containers:
      - name: gs-rest-service
        image: europe-west1-docker.pkg.dev/onyx-glider-460209-a9/gs-repository/gs-rest-service:v0.0.1
        ports:
        - containerPort: 8080
        imagePullPolicy: Always
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: prod
        - name: DATASOURCE_URL
          value: jdbc:mysql://127.0.0.1:3306/service-db
        - name: DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
      initContainers:
        - name: cloud-sql-proxy
          restartPolicy: Always
          # It is recommended to use the latest version of the Cloud SQL Auth Proxy
          # Make sure to update on a regular schedule!
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.14.1
          args:
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            # - "--private-ip"

            # If you are not connecting with Automatic IAM, you can delete
            # the following flag.
            - "--auto-iam-authn"

            # Enable structured logging with LogEntry format:
            - "--structured-logs"

            # Replace DB_PORT with the port the proxy should listen on
            - "--port=3306"
            - "onyx-glider-460209-a9:europe-west1:rs-rest-service-db"

          securityContext:
            # The default Cloud SQL Auth Proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true
          # You should use resource requests/limits as a best practice to prevent
          # pods from consuming too many resources and affecting the execution of
          # other pods. You should adjust the following values based on what your
          # application needs. For details, see
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            requests:
              # The proxy's memory use scales linearly with the number of active
              # connections. Fewer open connections will use less memory. Adjust
              # this value based on your application's requirements.
              memory: "2Gi"
              # The proxy's CPU use scales linearly with the amount of IO between
              # the database and the application. Adjust this value based on your
              # application's requirements.
              cpu: "1"
      volumes:
        - name:  cloudsql-sa-credentials-volume
          secret:
            secretName: cloudsql-sa-credentials